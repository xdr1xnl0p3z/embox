package third_party.samba_ext

module samba_stubs {
	source "stubs.c"
}

@Build(stage=2, script="$(EXTERNAL_MAKE)")
@BuildArtifactPath(cppflags="-I$(abspath $(EXTERNAL_BUILD_DIR))/third_party/samba_ext/core/samba-3.6.18/source3/include")
@BuildDepends(third_party.zlib.libs)
module core {
	@AddPrefix("^BUILD/extbld/^MOD_PATH/install")
	source
		"libsmbclient.a",
		"libtevent.a",
		"libtalloc.a",
		"libtdb.a",
		"libwbclient.a"

	depends samba_stubs
	depends embox.compat.libc.all
	depends embox.compat.posix.proc.exec_lib
	depends embox.compat.posix.idx.poll
	depends embox.compat.posix.proc.exec
	depends embox.net.lib.getifaddrs
	depends embox.compat.posix.sys.mman.mmap_api
	depends third_party.zlib.libs
	depends embox.compat.posix.fs.chown_api
	depends embox.compat.posix.fs.rewinddir_api
	depends embox.compat.posix.proc.atexit_api
	depends embox.compat.posix.sys.mman.mmap
	depends embox.compat.posix.fs.statvfs
}

@App
@AutoCmd
@Build(stage=2,script="$(EXTERNAL_MAKE)")
@Cmd(name = "smbclient",
	help = "smbclient shell",
	man = '''
		NAME
			smbclient - ftp-like client to access SMB/CIFS resources on servers
		SYNOPSIS
			smbclient --help for options
		AUTHORS
			fsulima - Adaptation for Embox
	''')
module smbclient {
	depends embox.compat.posix.idx.poll
	depends embox.net.lib.getifaddrs
	depends embox.compat.posix.passwd
	depends embox.compat.posix.fs.statvfs
	depends embox.compat.posix.sys.mman.msync
	depends embox.compat.posix.proc.atexit_api
	depends embox.compat.posix.idx.pipe
	depends embox.compat.posix.idx.select
	depends embox.compat.posix.util.swab
	depends embox.compat.posix.util.gethostname
	depends embox.compat.posix.net.gethostbyaddr
	depends embox.compat.posix.net.getservbyport
	depends embox.compat.posix.fs.rewinddir_api
	depends embox.compat.posix.fs.statvfs

	depends third_party.zlib.libs

	depends samba_stubs
	depends embox.compat.posix.stubs

	@Rule(script="true")
	source "^BUILD/extbld/^MOD_PATH/install/smbclient.embox.o"
}
